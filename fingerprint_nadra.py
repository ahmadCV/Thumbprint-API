import base64

import cv2
import numpy as np


def get_fingerprint(image: np.ndarray, output_mask):
    """

    :param image:
    :param bbox: [x1, y1, x2, y2]
    :return:
    """
    # image = image[bbox[1]:bbox[3], bbox[0]:bbox[2]]
    clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
    image_hist = clahe.apply(image)

    kernel_size = 25

    lowpass_kernel_box = np.ones((kernel_size, kernel_size))
    lowpass_kernel_box = lowpass_kernel_box / (kernel_size * kernel_size)
    lowpass_image_box = cv2.filter2D(image_hist, -1, lowpass_kernel_box)

    highpass_image_box = image_hist - lowpass_image_box
    highpass_image_box = np.absolute(highpass_image_box)

    ret, thresh = cv2.threshold(highpass_image_box, 150, 255, cv2.THRESH_BINARY)

    mask_inv = cv2.bitwise_not(output_mask)
    thresh = thresh + mask_inv

    thresh = cv2.flip(thresh, 1)

    h, w = thresh.shape
    new_h1 = 520.0 / h
    new_h2 = 468.0 / h
    dim1 = (int(new_h1*w), 520)
    dim2 = (int(new_h2*w), 468)
    fingerprint_1 = cv2.resize(thresh, dim1, interpolation=cv2.INTER_AREA)
    fingerprint_2 = cv2.resize(thresh, dim2, interpolation=cv2.INTER_AREA)

    # cv2.namedWindow("original", cv2.WINDOW_NORMAL)
    # cv2.imshow("original", image)
    # cv2.namedWindow("lowpass", cv2.WINDOW_NORMAL)
    # cv2.imshow("lowpass", lowpass_image_box)
    # cv2.namedWindow("highpass", cv2.WINDOW_NORMAL)
    # cv2.imshow("highpass", highpass_image_box)

    return fingerprint_1, fingerprint_2


def get_foreground(img, bbox):
    mask = np.zeros(img.shape[:2], np.uint8)
    bgdModel = np.zeros((1, 65), np.float64)
    fgdModel = np.zeros((1, 65), np.float64)
    cv2.grabCut(img, mask, bbox, bgdModel, fgdModel, 5, cv2.GC_INIT_WITH_RECT)

    outputMask = np.where((mask == cv2.GC_BGD) | (mask == cv2.GC_PR_BGD),
                          0, 1)
    # scale the mask from the range [0, 1] to [0, 255]
    outputMask = (outputMask * 255).astype("uint8")
    # apply a bitwise AND to the image using our mask generated by
    # GrabCut to generate our final output image

    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    img = cv2.bitwise_and(img, img, mask=outputMask)

    img = img[int(bbox[1]):int(bbox[1] + bbox[3]), int(bbox[0]):int(bbox[0] + bbox[2])]
    outputMask = outputMask[int(bbox[1]):int(bbox[1] + bbox[3]), int(bbox[0]):int(bbox[0] + bbox[2])]
    return img, outputMask


def get_fingerprint_video(video_path: str, dims, debug=False):
    cap = cv2.VideoCapture(video_path)
    frame_width = int(cap.get(3))
    frame_height = int(cap.get(4))
    first_frame = True
    fps = int(cap.get(cv2.CAP_PROP_FPS))
    frame_number = 1
    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break
        x = int(dims[2] * frame_width)
        y = int(dims[3] * frame_height)
        xx = x + int((dims[4] * dims[0]))
        yy = y + int((dims[5] * dims[1]))
        if debug:
            print("current second: ", frame_number/fps)
        if int(frame_number/fps) == 5 and first_frame:
            bbox = [x, y, xx - x, yy - y]
            print("dim: ", bbox)
            cropped, output_mask = get_foreground(frame, bbox)
            finger_1, finger_2 = get_fingerprint(cropped, output_mask)
            if debug:
                cv2.namedWindow("grabcut", cv2.WINDOW_NORMAL)
                cv2.imshow("grabcut", cropped)
                cv2.namedWindow("fingperprint", cv2.WINDOW_NORMAL)
                cv2.imshow("fingperprint", finger_1)
            first_frame = False
        frame_number += 1
        if debug:
            # cv2.rectangle(frame, (x, y), (xx, yy), color=(0, 255, 0), thickness=2)
            cv2.namedWindow("hello", cv2.WINDOW_NORMAL)
            cv2.imshow("hello", frame)
            cv2.waitKey(30)
        cv2.destroyAllWindows()

    return finger_1, finger_2


def base_64_encode(image: np.ndarray):
    _, image_encoded = cv2.imencode('.jpg', image)
    image_base64 = base64.b64encode(image_encoded.tobytes())
    image_string_base64 = image_base64.decode('utf-8')

    return image_string_base64


if __name__ == '__main__':
    get_fingerprint_video("askari/test_app.mp4")